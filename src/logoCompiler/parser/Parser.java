package logoCompiler.parser;

import logoCompiler.lexer.*;

public final class Parser {
    private Token currentToken;
    private Token lastToken;

    private Lexer lexer;

    public Parser(Lexer lexer) {
        this.lexer = lexer;
        currentToken = lexer.getNextToken();
    }

    /*The parser accepts a stream of tokens generated by the lexer.
     Each token taken is them appropriately parses the token into
     a suitable data structure.A */
    public Prog parse() {
        try {
            return Prog.parse(this);
        } catch (ParsingException e) {
            resynchronize();
            return null;
        }
    }

    public Token getNextToken() {
        lastToken = currentToken;
        currentToken = lexer.getNextToken();
        return currentToken;
    }

    public Token getLastToken() {
        return lastToken;
    }

    public Token getCurrentToken() {
        return currentToken;
    }


    /*Token pairs, for example if and endif are made synchronising and re-synchronizes tokens respectively.
    Once the lexer hits an error, the parser will take the most recent synchronising token and
    all potentially  erroneous code until it reaches a  re-synchronizes token at which point the parser
    continues to parse the file */
    public void resynchronize() {
        //System.out.println("Resynchronizing...");
        while(true) {
            while (!currentToken.hasTokenTrait(TokenTrait.SYNCHRONIZING_TOKEN)) {
                getNextToken();
            }

            try {
                if (currentToken instanceof PROCToken) {
                    Proc.parse(this);
                } else if (currentToken.hasTokenTrait(TokenTrait.VALID_STATEMENT_BEGINNING)) {
                    Stmt.parse(this, "%ERROR%");
                }
                else if (currentToken instanceof ELSEToken) {
                    ElseSyncStmt.parse(this);
                }
                 else if(currentToken instanceof EOIToken) {
                    break;
                }
            } catch (ParsingException e) {
                //...
                resynchronize();
            }
        }
    }
}
